#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba32f) readonly uniform image2D voxelColorAccumulationBuffer;
layout (binding = 1, rgba32f) readonly uniform image2D inputColorBuffer;
layout (binding = 2, rgba32f) writeonly uniform image2D outputColorBuffer;

uniform ivec2 screenResolution;

void main() {
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (pixelCoord.x >= screenResolution.x || pixelCoord.y >= screenResolution.y) {
        return;
    }

    vec4 inputData = texelFetch(inputColorBuffer, pixelCoord, 0).xyzw;
    uint voxelID = floatBitsToUint(data.w);
    float count = texelFetch(voxelColorAccumulationBuffer, ivec2(voxelID, 3), 0).r;

    if (count > 0) {
        vec4 accumulatedColor;
        accumulatedColor.r = texelFetch(voxelColorAccumulationBuffer, ivec2(voxelID, 0), 0).r;
        accumulatedColor.g = texelFetch(voxelColorAccumulationBuffer, ivec2(voxelID, 1), 0).r;
        accumulatedColor.b = texelFetch(voxelColorAccumulationBuffer, ivec2(voxelID, 2), 0).r;

        vec4 averageColor = vec4(accumulatedColor.xyz / float(count), 1);
        imageStore(outputColorBuffer, pixelCoord, averageColor);
    } else {
        imageStore(outputColorBuffer, pixelCoord, texelFetch(inputColorBuffer, pixelCoord, 0));
    }
}